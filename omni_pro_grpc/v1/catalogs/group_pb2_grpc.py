# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from omni_pro_grpc.v1.catalogs import group_pb2 as v1_dot_catalogs_dot_group__pb2


class GroupServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GroupCreate = channel.unary_unary(
            "/pro.omni.oms.api.v1.catalogs.group.GroupService/GroupCreate",
            request_serializer=v1_dot_catalogs_dot_group__pb2.GroupCreateRequest.SerializeToString,
            response_deserializer=v1_dot_catalogs_dot_group__pb2.GroupCreateResponse.FromString,
        )
        self.GroupRead = channel.unary_unary(
            "/pro.omni.oms.api.v1.catalogs.group.GroupService/GroupRead",
            request_serializer=v1_dot_catalogs_dot_group__pb2.GroupReadRequest.SerializeToString,
            response_deserializer=v1_dot_catalogs_dot_group__pb2.GroupReadResponse.FromString,
        )
        self.GroupUpdate = channel.unary_unary(
            "/pro.omni.oms.api.v1.catalogs.group.GroupService/GroupUpdate",
            request_serializer=v1_dot_catalogs_dot_group__pb2.GroupUpdateRequest.SerializeToString,
            response_deserializer=v1_dot_catalogs_dot_group__pb2.GroupUpdateResponse.FromString,
        )
        self.GroupDelete = channel.unary_unary(
            "/pro.omni.oms.api.v1.catalogs.group.GroupService/GroupDelete",
            request_serializer=v1_dot_catalogs_dot_group__pb2.GroupDeleteRequest.SerializeToString,
            response_deserializer=v1_dot_catalogs_dot_group__pb2.GroupDeleteResponse.FromString,
        )


class GroupServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GroupCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GroupRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GroupUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GroupDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_GroupServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GroupCreate": grpc.unary_unary_rpc_method_handler(
            servicer.GroupCreate,
            request_deserializer=v1_dot_catalogs_dot_group__pb2.GroupCreateRequest.FromString,
            response_serializer=v1_dot_catalogs_dot_group__pb2.GroupCreateResponse.SerializeToString,
        ),
        "GroupRead": grpc.unary_unary_rpc_method_handler(
            servicer.GroupRead,
            request_deserializer=v1_dot_catalogs_dot_group__pb2.GroupReadRequest.FromString,
            response_serializer=v1_dot_catalogs_dot_group__pb2.GroupReadResponse.SerializeToString,
        ),
        "GroupUpdate": grpc.unary_unary_rpc_method_handler(
            servicer.GroupUpdate,
            request_deserializer=v1_dot_catalogs_dot_group__pb2.GroupUpdateRequest.FromString,
            response_serializer=v1_dot_catalogs_dot_group__pb2.GroupUpdateResponse.SerializeToString,
        ),
        "GroupDelete": grpc.unary_unary_rpc_method_handler(
            servicer.GroupDelete,
            request_deserializer=v1_dot_catalogs_dot_group__pb2.GroupDeleteRequest.FromString,
            response_serializer=v1_dot_catalogs_dot_group__pb2.GroupDeleteResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "pro.omni.oms.api.v1.catalogs.group.GroupService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class GroupService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GroupCreate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.catalogs.group.GroupService/GroupCreate",
            v1_dot_catalogs_dot_group__pb2.GroupCreateRequest.SerializeToString,
            v1_dot_catalogs_dot_group__pb2.GroupCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GroupRead(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.catalogs.group.GroupService/GroupRead",
            v1_dot_catalogs_dot_group__pb2.GroupReadRequest.SerializeToString,
            v1_dot_catalogs_dot_group__pb2.GroupReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GroupUpdate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.catalogs.group.GroupService/GroupUpdate",
            v1_dot_catalogs_dot_group__pb2.GroupUpdateRequest.SerializeToString,
            v1_dot_catalogs_dot_group__pb2.GroupUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GroupDelete(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.catalogs.group.GroupService/GroupDelete",
            v1_dot_catalogs_dot_group__pb2.GroupDeleteRequest.SerializeToString,
            v1_dot_catalogs_dot_group__pb2.GroupDeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
