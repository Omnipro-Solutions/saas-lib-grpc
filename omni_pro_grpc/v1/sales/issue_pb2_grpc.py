# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from omni_pro_grpc.v1.sales import issue_pb2 as v1_dot_sales_dot_issue__pb2


class IssueServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IssueCreate = channel.unary_unary(
            "/pro.omni.oms.api.v1.sales.issue.IssueService/IssueCreate",
            request_serializer=v1_dot_sales_dot_issue__pb2.IssueCreateRequest.SerializeToString,
            response_deserializer=v1_dot_sales_dot_issue__pb2.IssueCreateResponse.FromString,
        )
        self.IssueRead = channel.unary_unary(
            "/pro.omni.oms.api.v1.sales.issue.IssueService/IssueRead",
            request_serializer=v1_dot_sales_dot_issue__pb2.IssueReadRequest.SerializeToString,
            response_deserializer=v1_dot_sales_dot_issue__pb2.IssueReadResponse.FromString,
        )
        self.IssueUpdate = channel.unary_unary(
            "/pro.omni.oms.api.v1.sales.issue.IssueService/IssueUpdate",
            request_serializer=v1_dot_sales_dot_issue__pb2.IssueUpdateRequest.SerializeToString,
            response_deserializer=v1_dot_sales_dot_issue__pb2.IssueUpdateResponse.FromString,
        )
        self.IssueDelete = channel.unary_unary(
            "/pro.omni.oms.api.v1.sales.issue.IssueService/IssueDelete",
            request_serializer=v1_dot_sales_dot_issue__pb2.IssueDeleteRequest.SerializeToString,
            response_deserializer=v1_dot_sales_dot_issue__pb2.IssueDeleteResponse.FromString,
        )
        self.IssueTypeCreate = channel.unary_unary(
            "/pro.omni.oms.api.v1.sales.issue.IssueService/IssueTypeCreate",
            request_serializer=v1_dot_sales_dot_issue__pb2.IssueTypeCreateRequest.SerializeToString,
            response_deserializer=v1_dot_sales_dot_issue__pb2.IssueTypeCreateResponse.FromString,
        )
        self.IssueTypeRead = channel.unary_unary(
            "/pro.omni.oms.api.v1.sales.issue.IssueService/IssueTypeRead",
            request_serializer=v1_dot_sales_dot_issue__pb2.IssueTypeReadRequest.SerializeToString,
            response_deserializer=v1_dot_sales_dot_issue__pb2.IssueTypeReadResponse.FromString,
        )
        self.IssueTypeUpdate = channel.unary_unary(
            "/pro.omni.oms.api.v1.sales.issue.IssueService/IssueTypeUpdate",
            request_serializer=v1_dot_sales_dot_issue__pb2.IssueTypeUpdateRequest.SerializeToString,
            response_deserializer=v1_dot_sales_dot_issue__pb2.IssueTypeUpdateResponse.FromString,
        )
        self.IssueTypeDelete = channel.unary_unary(
            "/pro.omni.oms.api.v1.sales.issue.IssueService/IssueTypeDelete",
            request_serializer=v1_dot_sales_dot_issue__pb2.IssueTypeDeleteRequest.SerializeToString,
            response_deserializer=v1_dot_sales_dot_issue__pb2.IssueTypeDeleteResponse.FromString,
        )


class IssueServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def IssueCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def IssueRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def IssueUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def IssueDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def IssueTypeCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def IssueTypeRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def IssueTypeUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def IssueTypeDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_IssueServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "IssueCreate": grpc.unary_unary_rpc_method_handler(
            servicer.IssueCreate,
            request_deserializer=v1_dot_sales_dot_issue__pb2.IssueCreateRequest.FromString,
            response_serializer=v1_dot_sales_dot_issue__pb2.IssueCreateResponse.SerializeToString,
        ),
        "IssueRead": grpc.unary_unary_rpc_method_handler(
            servicer.IssueRead,
            request_deserializer=v1_dot_sales_dot_issue__pb2.IssueReadRequest.FromString,
            response_serializer=v1_dot_sales_dot_issue__pb2.IssueReadResponse.SerializeToString,
        ),
        "IssueUpdate": grpc.unary_unary_rpc_method_handler(
            servicer.IssueUpdate,
            request_deserializer=v1_dot_sales_dot_issue__pb2.IssueUpdateRequest.FromString,
            response_serializer=v1_dot_sales_dot_issue__pb2.IssueUpdateResponse.SerializeToString,
        ),
        "IssueDelete": grpc.unary_unary_rpc_method_handler(
            servicer.IssueDelete,
            request_deserializer=v1_dot_sales_dot_issue__pb2.IssueDeleteRequest.FromString,
            response_serializer=v1_dot_sales_dot_issue__pb2.IssueDeleteResponse.SerializeToString,
        ),
        "IssueTypeCreate": grpc.unary_unary_rpc_method_handler(
            servicer.IssueTypeCreate,
            request_deserializer=v1_dot_sales_dot_issue__pb2.IssueTypeCreateRequest.FromString,
            response_serializer=v1_dot_sales_dot_issue__pb2.IssueTypeCreateResponse.SerializeToString,
        ),
        "IssueTypeRead": grpc.unary_unary_rpc_method_handler(
            servicer.IssueTypeRead,
            request_deserializer=v1_dot_sales_dot_issue__pb2.IssueTypeReadRequest.FromString,
            response_serializer=v1_dot_sales_dot_issue__pb2.IssueTypeReadResponse.SerializeToString,
        ),
        "IssueTypeUpdate": grpc.unary_unary_rpc_method_handler(
            servicer.IssueTypeUpdate,
            request_deserializer=v1_dot_sales_dot_issue__pb2.IssueTypeUpdateRequest.FromString,
            response_serializer=v1_dot_sales_dot_issue__pb2.IssueTypeUpdateResponse.SerializeToString,
        ),
        "IssueTypeDelete": grpc.unary_unary_rpc_method_handler(
            servicer.IssueTypeDelete,
            request_deserializer=v1_dot_sales_dot_issue__pb2.IssueTypeDeleteRequest.FromString,
            response_serializer=v1_dot_sales_dot_issue__pb2.IssueTypeDeleteResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "pro.omni.oms.api.v1.sales.issue.IssueService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class IssueService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def IssueCreate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.sales.issue.IssueService/IssueCreate",
            v1_dot_sales_dot_issue__pb2.IssueCreateRequest.SerializeToString,
            v1_dot_sales_dot_issue__pb2.IssueCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def IssueRead(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.sales.issue.IssueService/IssueRead",
            v1_dot_sales_dot_issue__pb2.IssueReadRequest.SerializeToString,
            v1_dot_sales_dot_issue__pb2.IssueReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def IssueUpdate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.sales.issue.IssueService/IssueUpdate",
            v1_dot_sales_dot_issue__pb2.IssueUpdateRequest.SerializeToString,
            v1_dot_sales_dot_issue__pb2.IssueUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def IssueDelete(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.sales.issue.IssueService/IssueDelete",
            v1_dot_sales_dot_issue__pb2.IssueDeleteRequest.SerializeToString,
            v1_dot_sales_dot_issue__pb2.IssueDeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def IssueTypeCreate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.sales.issue.IssueService/IssueTypeCreate",
            v1_dot_sales_dot_issue__pb2.IssueTypeCreateRequest.SerializeToString,
            v1_dot_sales_dot_issue__pb2.IssueTypeCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def IssueTypeRead(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.sales.issue.IssueService/IssueTypeRead",
            v1_dot_sales_dot_issue__pb2.IssueTypeReadRequest.SerializeToString,
            v1_dot_sales_dot_issue__pb2.IssueTypeReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def IssueTypeUpdate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.sales.issue.IssueService/IssueTypeUpdate",
            v1_dot_sales_dot_issue__pb2.IssueTypeUpdateRequest.SerializeToString,
            v1_dot_sales_dot_issue__pb2.IssueTypeUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def IssueTypeDelete(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.sales.issue.IssueService/IssueTypeDelete",
            v1_dot_sales_dot_issue__pb2.IssueTypeDeleteRequest.SerializeToString,
            v1_dot_sales_dot_issue__pb2.IssueTypeDeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
