# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from omni_pro_grpc.v1.tasks import crontab_pb2 as v1_dot_tasks_dot_crontab__pb2


class CrontabServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CrontabCreate = channel.unary_unary(
            "/pro.omni.oms.api.tasks.crontab.CrontabService/CrontabCreate",
            request_serializer=v1_dot_tasks_dot_crontab__pb2.CrontabCreateRequest.SerializeToString,
            response_deserializer=v1_dot_tasks_dot_crontab__pb2.CrontabCreateResponse.FromString,
        )
        self.CrontabRead = channel.unary_unary(
            "/pro.omni.oms.api.tasks.crontab.CrontabService/CrontabRead",
            request_serializer=v1_dot_tasks_dot_crontab__pb2.CrontabReadRequest.SerializeToString,
            response_deserializer=v1_dot_tasks_dot_crontab__pb2.CrontabReadResponse.FromString,
        )
        self.CrontabUpdate = channel.unary_unary(
            "/pro.omni.oms.api.tasks.crontab.CrontabService/CrontabUpdate",
            request_serializer=v1_dot_tasks_dot_crontab__pb2.CrontabUpdateRequest.SerializeToString,
            response_deserializer=v1_dot_tasks_dot_crontab__pb2.CrontabUpdateResponse.FromString,
        )
        self.CrontabDelete = channel.unary_unary(
            "/pro.omni.oms.api.tasks.crontab.CrontabService/CrontabDelete",
            request_serializer=v1_dot_tasks_dot_crontab__pb2.CrontabDeleteRequest.SerializeToString,
            response_deserializer=v1_dot_tasks_dot_crontab__pb2.CrontabDeleteResponse.FromString,
        )


class CrontabServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CrontabCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CrontabRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CrontabUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CrontabDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CrontabServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CrontabCreate": grpc.unary_unary_rpc_method_handler(
            servicer.CrontabCreate,
            request_deserializer=v1_dot_tasks_dot_crontab__pb2.CrontabCreateRequest.FromString,
            response_serializer=v1_dot_tasks_dot_crontab__pb2.CrontabCreateResponse.SerializeToString,
        ),
        "CrontabRead": grpc.unary_unary_rpc_method_handler(
            servicer.CrontabRead,
            request_deserializer=v1_dot_tasks_dot_crontab__pb2.CrontabReadRequest.FromString,
            response_serializer=v1_dot_tasks_dot_crontab__pb2.CrontabReadResponse.SerializeToString,
        ),
        "CrontabUpdate": grpc.unary_unary_rpc_method_handler(
            servicer.CrontabUpdate,
            request_deserializer=v1_dot_tasks_dot_crontab__pb2.CrontabUpdateRequest.FromString,
            response_serializer=v1_dot_tasks_dot_crontab__pb2.CrontabUpdateResponse.SerializeToString,
        ),
        "CrontabDelete": grpc.unary_unary_rpc_method_handler(
            servicer.CrontabDelete,
            request_deserializer=v1_dot_tasks_dot_crontab__pb2.CrontabDeleteRequest.FromString,
            response_serializer=v1_dot_tasks_dot_crontab__pb2.CrontabDeleteResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "pro.omni.oms.api.tasks.crontab.CrontabService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class CrontabService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CrontabCreate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.tasks.crontab.CrontabService/CrontabCreate",
            v1_dot_tasks_dot_crontab__pb2.CrontabCreateRequest.SerializeToString,
            v1_dot_tasks_dot_crontab__pb2.CrontabCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CrontabRead(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.tasks.crontab.CrontabService/CrontabRead",
            v1_dot_tasks_dot_crontab__pb2.CrontabReadRequest.SerializeToString,
            v1_dot_tasks_dot_crontab__pb2.CrontabReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CrontabUpdate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.tasks.crontab.CrontabService/CrontabUpdate",
            v1_dot_tasks_dot_crontab__pb2.CrontabUpdateRequest.SerializeToString,
            v1_dot_tasks_dot_crontab__pb2.CrontabUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CrontabDelete(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.tasks.crontab.CrontabService/CrontabDelete",
            v1_dot_tasks_dot_crontab__pb2.CrontabDeleteRequest.SerializeToString,
            v1_dot_tasks_dot_crontab__pb2.CrontabDeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
