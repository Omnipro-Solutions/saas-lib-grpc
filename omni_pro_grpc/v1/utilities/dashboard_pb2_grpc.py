# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from omni_pro_grpc.v1.utilities import dashboard_pb2 as v1_dot_utilities_dot_dashboard__pb2


class DashboardServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DashboardCreate = channel.unary_unary(
            "/pro.omni.oms.api.v1.utilities.dashboard.DashboardService/DashboardCreate",
            request_serializer=v1_dot_utilities_dot_dashboard__pb2.DashboardCreateRequest.SerializeToString,
            response_deserializer=v1_dot_utilities_dot_dashboard__pb2.DashboardCreateResponse.FromString,
        )
        self.DashboardRead = channel.unary_unary(
            "/pro.omni.oms.api.v1.utilities.dashboard.DashboardService/DashboardRead",
            request_serializer=v1_dot_utilities_dot_dashboard__pb2.DashboardReadRequest.SerializeToString,
            response_deserializer=v1_dot_utilities_dot_dashboard__pb2.DashboardReadResponse.FromString,
        )
        self.DashboardUpdate = channel.unary_unary(
            "/pro.omni.oms.api.v1.utilities.dashboard.DashboardService/DashboardUpdate",
            request_serializer=v1_dot_utilities_dot_dashboard__pb2.DashboardUpdateRequest.SerializeToString,
            response_deserializer=v1_dot_utilities_dot_dashboard__pb2.DashboardUpdateResponse.FromString,
        )
        self.DashboardDelete = channel.unary_unary(
            "/pro.omni.oms.api.v1.utilities.dashboard.DashboardService/DashboardDelete",
            request_serializer=v1_dot_utilities_dot_dashboard__pb2.DashboardDeleteRequest.SerializeToString,
            response_deserializer=v1_dot_utilities_dot_dashboard__pb2.DashboardDeleteResponse.FromString,
        )


class DashboardServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DashboardCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DashboardRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DashboardUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DashboardDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_DashboardServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "DashboardCreate": grpc.unary_unary_rpc_method_handler(
            servicer.DashboardCreate,
            request_deserializer=v1_dot_utilities_dot_dashboard__pb2.DashboardCreateRequest.FromString,
            response_serializer=v1_dot_utilities_dot_dashboard__pb2.DashboardCreateResponse.SerializeToString,
        ),
        "DashboardRead": grpc.unary_unary_rpc_method_handler(
            servicer.DashboardRead,
            request_deserializer=v1_dot_utilities_dot_dashboard__pb2.DashboardReadRequest.FromString,
            response_serializer=v1_dot_utilities_dot_dashboard__pb2.DashboardReadResponse.SerializeToString,
        ),
        "DashboardUpdate": grpc.unary_unary_rpc_method_handler(
            servicer.DashboardUpdate,
            request_deserializer=v1_dot_utilities_dot_dashboard__pb2.DashboardUpdateRequest.FromString,
            response_serializer=v1_dot_utilities_dot_dashboard__pb2.DashboardUpdateResponse.SerializeToString,
        ),
        "DashboardDelete": grpc.unary_unary_rpc_method_handler(
            servicer.DashboardDelete,
            request_deserializer=v1_dot_utilities_dot_dashboard__pb2.DashboardDeleteRequest.FromString,
            response_serializer=v1_dot_utilities_dot_dashboard__pb2.DashboardDeleteResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "pro.omni.oms.api.v1.utilities.dashboard.DashboardService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class DashboardService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DashboardCreate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.utilities.dashboard.DashboardService/DashboardCreate",
            v1_dot_utilities_dot_dashboard__pb2.DashboardCreateRequest.SerializeToString,
            v1_dot_utilities_dot_dashboard__pb2.DashboardCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DashboardRead(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.utilities.dashboard.DashboardService/DashboardRead",
            v1_dot_utilities_dot_dashboard__pb2.DashboardReadRequest.SerializeToString,
            v1_dot_utilities_dot_dashboard__pb2.DashboardReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DashboardUpdate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.utilities.dashboard.DashboardService/DashboardUpdate",
            v1_dot_utilities_dot_dashboard__pb2.DashboardUpdateRequest.SerializeToString,
            v1_dot_utilities_dot_dashboard__pb2.DashboardUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DashboardDelete(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/pro.omni.oms.api.v1.utilities.dashboard.DashboardService/DashboardDelete",
            v1_dot_utilities_dot_dashboard__pb2.DashboardDeleteRequest.SerializeToString,
            v1_dot_utilities_dot_dashboard__pb2.DashboardDeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
